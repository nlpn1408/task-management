{
  "version": 3,
  "sources": ["../../../../src/controllers/authController.ts"],
  "sourcesContent": ["import {\r\n  AdminCreateUserCommand,\r\n  AdminInitiateAuthCommand,\r\n  AdminRespondToAuthChallengeCommand,\r\n  AdminSetUserPasswordCommand,\r\n  CognitoIdentityProviderClient,\r\n} from \"@aws-sdk/client-cognito-identity-provider\";\r\nimport { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\r\nimport {\r\n  DynamoDBDocumentClient,\r\n  GetCommand,\r\n  PutCommand,\r\n} from \"@aws-sdk/lib-dynamodb\";\r\nimport { APIGatewayProxyEvent, APIGatewayProxyResult } from \"aws-lambda\";\r\n\r\nconst client = new CognitoIdentityProviderClient({ region: \"ap-southeast-1\" });\r\n\r\nconst USER_POOL_ID = process.env.USER_POOL_ID!;\r\nconst CLIENT_ID = process.env.CLIENT_ID!;\r\nconst docClient = DynamoDBDocumentClient.from(new DynamoDBClient({}));\r\nconst USERS_TABLE = process.env.USERS_TABLE || \"Users\";\r\n\r\n// Hardcoded OTP for testing\r\nconst HARD_CODED_OTP = \"1111\";\r\n\r\nconst checkUserInDB = async (phone: string): Promise<boolean> => {\r\n  try {\r\n    const normalizedPhone = phone.startsWith(\"+\")\r\n      ? phone\r\n      : `+84${phone.replace(/^0/, \"\")}`;\r\n    const result = await docClient.send(\r\n      new GetCommand({\r\n        TableName: USERS_TABLE,\r\n        Key: { phone: normalizedPhone },\r\n      })\r\n    );\r\n    return !!result.Item;\r\n  } catch (error) {\r\n    console.error(\"\uD83D\uDE80 ~ checkUserInDB ~ error:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const startLogin = async (\r\n  event: APIGatewayProxyEvent\r\n): Promise<APIGatewayProxyResult> => {\r\n  try {\r\n    const { username } = JSON.parse(event.body || \"{}\") as {\r\n      username?: string;\r\n    };\r\n    if (!username) {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({ error: \"Phone number is required\" }),\r\n      };\r\n    }\r\n\r\n    // const normalizedPhone = username.startsWith(\"+\")\r\n    //   ? username\r\n    //   : `+84${username.replace(/^0/, \"\")}`;\r\n    // console.log(\"\uD83D\uDE80 ~ startLogin ~ normalizedPhone:\", normalizedPhone);\r\n    const normalizedPhone = `+${username}`;\r\n\r\n    const userExists = await checkUserInDB(normalizedPhone);\r\n    console.log(\"\uD83D\uDE80 ~ startLogin ~ userExists:\", userExists);\r\n\r\n    if (userExists) {\r\n      return {\r\n        statusCode: 200,\r\n        body: JSON.stringify({ step: \"PASSWORD\", data: true, success: true }),\r\n      };\r\n    } else {\r\n      // T\u1EA1o ng\u01B0\u1EDDi d\u00F9ng m\u1EDBi trong Cognito\r\n      try {\r\n        await client.send(\r\n          new AdminCreateUserCommand({\r\n            UserPoolId: USER_POOL_ID,\r\n            Username: normalizedPhone,\r\n            DesiredDeliveryMediums: [\"SMS\"],\r\n            ForceAliasCreation: false,\r\n          })\r\n        );\r\n        console.log(\"\uD83D\uDE80 ~ startLogin ~ user created:\", normalizedPhone);\r\n      } catch (createError: any) {\r\n        console.error(\"\uD83D\uDE80 ~ startLogin ~ createUser error:\", createError);\r\n        if (createError.name !== \"UsernameExistsException\") throw createError;\r\n      }\r\n\r\n      // Kh\u1EDFi t\u1EA1o lu\u1ED3ng OTP\r\n      const command = new AdminInitiateAuthCommand({\r\n        UserPoolId: USER_POOL_ID,\r\n        ClientId: CLIENT_ID,\r\n        AuthFlow: \"CUSTOM_AUTH\",\r\n        AuthParameters: { USERNAME: normalizedPhone },\r\n      });\r\n      console.log(\"\uD83D\uDE80 ~ startLogin ~ command input:\", command.input);\r\n      const response = await client.send(command);\r\n      console.log(\"\uD83D\uDE80 ~ startLogin ~ response:\", response);\r\n\r\n      // return {\r\n      //   statusCode: 200,\r\n      //   body: JSON.stringify({ data: \"OTP\", session: response.Session }),\r\n      // };\r\n\r\n      return {\r\n        statusCode: 200,\r\n        body: JSON.stringify({\r\n          data: \"false\",\r\n          success: true,\r\n          session: response.Session,\r\n        }),\r\n      };\r\n    }\r\n  } catch (error: any) {\r\n    console.error(\"\uD83D\uDE80 ~ startLogin ~ error:\", error);\r\n    return {\r\n      statusCode: 400,\r\n      body: JSON.stringify({\r\n        error: \"Login initiation failed\",\r\n        details: error.message,\r\n      }),\r\n    };\r\n  }\r\n};\r\n\r\n// 2. Verify OTP (forward cho Cognito t\u1EF1 x\u1EED l\u00FD)\r\nexport const verifyOtp = async (\r\n  event: APIGatewayProxyEvent\r\n): Promise<APIGatewayProxyResult> => {\r\n  try {\r\n    const { username, code, session } = JSON.parse(event.body || \"{}\") as {\r\n      username?: string;\r\n      code?: string;\r\n      session?: string;\r\n    };\r\n    if (!username || !code || !session) {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({ error: \"Phone, OTP, and session are required\" }),\r\n      };\r\n    }\r\n    const normalizedPhone = `+${username}`;\r\n    const command = new AdminRespondToAuthChallengeCommand({\r\n      UserPoolId: USER_POOL_ID,\r\n      ClientId: CLIENT_ID,\r\n      ChallengeName: \"CUSTOM_CHALLENGE\",\r\n      Session: session,\r\n      ChallengeResponses: { USERNAME: normalizedPhone, ANSWER: code },\r\n    });\r\n\r\n    const response = await client.send(command);\r\n    console.log(\"\uD83D\uDE80 ~ verifyOtp ~ response:\", response);\r\n\r\n    if (response.AuthenticationResult) {\r\n      return {\r\n        statusCode: 200,\r\n        body: JSON.stringify({ step: \"REGISTER\", session: session }),\r\n      };\r\n    } else if (response.ChallengeName === \"CUSTOM_CHALLENGE\") {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({\r\n          error: \"Invalid OTP, please try again\",\r\n          session: response.Session,\r\n        }),\r\n      };\r\n    } else {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({\r\n          error: \"OTP verification failed, unexpected response\",\r\n        }),\r\n      };\r\n    }\r\n  } catch (error: any) {\r\n    console.error(\"\uD83D\uDE80 ~ verifyOtp ~ error:\", error);\r\n    if (error.name === \"NotAuthorizedException\") {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({\r\n          error: \"Invalid OTP, please try again\",\r\n          details: error.message,\r\n        }),\r\n      };\r\n    } else if (error.name === \"InvalidSessionException\") {\r\n      return {\r\n        statusCode: 401,\r\n        body: JSON.stringify({\r\n          error: \"Session expired or invalid, please restart login\",\r\n          details: error.message,\r\n        }),\r\n      };\r\n    }\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({\r\n        error: \"Internal server error\",\r\n        details: error.message,\r\n      }),\r\n    };\r\n  }\r\n};\r\n\r\nexport const registerUser = async (\r\n  event: APIGatewayProxyEvent\r\n): Promise<APIGatewayProxyResult> => {\r\n  try {\r\n    const { username, password } = JSON.parse(event.body || \"{}\") as {\r\n      username?: string;\r\n      password?: string;\r\n    };\r\n    if (!username || !password) {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({ error: \"Phone and password are required\" }),\r\n      };\r\n    }\r\n\r\n    // const normalizedPhone = phone.startsWith(\"+\")\r\n    //   ? phone\r\n    //   : `+84${phone.replace(/^0/, \"\")}`;\r\n    // console.log(\"\uD83D\uDE80 ~ registerUser ~ received phone:\", normalizedPhone);\r\n\r\n    const normalizedPhone = `+${username}`;\r\n\r\n    // \u0110\u1EB7t password cho user trong Cognito\r\n    await client.send(\r\n      new AdminSetUserPasswordCommand({\r\n        UserPoolId: USER_POOL_ID,\r\n        Username: normalizedPhone,\r\n        Password: password,\r\n        Permanent: true,\r\n      })\r\n    );\r\n\r\n    await docClient.send(\r\n      new PutCommand({\r\n        TableName: USERS_TABLE,\r\n        Item: {\r\n          phone: normalizedPhone,\r\n          registeredAt: new Date().toISOString(),\r\n        },\r\n      })\r\n    );\r\n\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify({ step: \"PASSWORD\", data: true, success: true }),\r\n    };\r\n  } catch (error: any) {\r\n    console.error(\"\uD83D\uDE80 ~ registerUser ~ error:\", error);\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({\r\n        error: \"Registration failed\",\r\n        details: error.message,\r\n      }),\r\n    };\r\n  }\r\n};\r\n\r\nexport const signin = async (\r\n  event: APIGatewayProxyEvent\r\n): Promise<APIGatewayProxyResult> => {\r\n  try {\r\n    const { username, password } = JSON.parse(event.body || \"{}\") as {\r\n      username?: string;\r\n      password?: string;\r\n    };\r\n    if (!username || !password) {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({ error: \"Username and password are required\" }),\r\n      };\r\n    }\r\n\r\n    // const normalizedPhone = phone.startsWith(\"+\")\r\n    //   ? phone\r\n    //   : `+84${phone.replace(/^0/, \"\")}`;\r\n    // console.log(\"\uD83D\uDE80 ~ signin ~ received phone:\", normalizedPhone);\r\n    const normalizedPhone = `+${username}`;\r\n\r\n    const command = new AdminInitiateAuthCommand({\r\n      UserPoolId: USER_POOL_ID,\r\n      ClientId: CLIENT_ID,\r\n      AuthFlow: \"ADMIN_NO_SRP_AUTH\",\r\n      AuthParameters: {\r\n        USERNAME: normalizedPhone,\r\n        PASSWORD: password,\r\n      },\r\n    });\r\n\r\n    const response = await client.send(command);\r\n    console.log(\"\uD83D\uDE80 ~ signin ~ response:\", response);\r\n\r\n    if (response.AuthenticationResult) {\r\n      return {\r\n        statusCode: 200,\r\n        body: JSON.stringify({\r\n          step: \"SUCCESS\",\r\n          tokens: {\r\n            accessToken: response.AuthenticationResult.AccessToken,\r\n            idToken: response.AuthenticationResult.IdToken,\r\n            refreshToken: response.AuthenticationResult.RefreshToken,\r\n          },\r\n        }),\r\n      };\r\n    } else {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({\r\n          error: \"Authentication failed, unexpected response\",\r\n        }),\r\n      };\r\n    }\r\n  } catch (error: any) {\r\n    console.error(\"\uD83D\uDE80 ~ signin ~ error:\", error);\r\n    if (error.name === \"NotAuthorizedException\") {\r\n      return {\r\n        statusCode: 401,\r\n        body: JSON.stringify({\r\n          error: \"Invalid phone or password\",\r\n          details: error.message,\r\n        }),\r\n      };\r\n    } else if (error.name === \"UserNotFoundException\") {\r\n      return {\r\n        statusCode: 404,\r\n        body: JSON.stringify({\r\n          error: \"User not found\",\r\n          details: error.message,\r\n        }),\r\n      };\r\n    }\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({\r\n        error: \"Internal server error\",\r\n        details: error.message,\r\n      }),\r\n    };\r\n  }\r\n};\r\n\r\nexport default {\r\n  startLogin,\r\n  verifyOtp,\r\n  registerUser,\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
