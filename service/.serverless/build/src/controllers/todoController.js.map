{
  "version": 3,
  "sources": ["../../../../src/controllers/todoController.ts", "../../../../src/services/todoService.ts", "../../../../src/config/aws.ts", "../../../../node_modules/uuid/dist/esm/stringify.js", "../../../../node_modules/uuid/dist/esm/rng.js", "../../../../node_modules/uuid/dist/esm/native.js", "../../../../node_modules/uuid/dist/esm/v4.js", "../../../../src/utils/helper.ts"],
  "sourcesContent": ["import { ScanCommandInput } from \"@aws-sdk/lib-dynamodb\";\nimport { APIGatewayEvent, APIGatewayProxyResult } from \"aws-lambda\";\nimport * as todoService from \"../services/todoService\";\nimport { Todo } from \"../types/todo\";\n\nexport const createTodo = async (\n  event: APIGatewayEvent\n): Promise<APIGatewayProxyResult> => {\n  try {\n    const { taskCode, title, description, status } = JSON.parse(\n      event.body || \"{}\"\n    );\n    const todo = await todoService.createTodo({\n      taskCode,\n      title,\n      description,\n      status,\n    });\n    return {\n      statusCode: 201,\n      body: JSON.stringify(todo),\n    };\n  } catch (error: any) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: \"Could not create todo.\",\n        error: error.message,\n      }),\n    };\n  }\n};\n\nexport const listTodos = async (\n  event: APIGatewayEvent\n): Promise<APIGatewayProxyResult> => {\n  try {\n    const { keyword, status, limit, lastKey } =\n      event.queryStringParameters || {};\n\n    let scanParams: ScanCommandInput = {\n      TableName: \"todos-table\",\n      Limit: limit ? parseInt(limit as string) : 10,\n    };\n\n    if (lastKey) {\n      scanParams.ExclusiveStartKey = JSON.parse(\n        Buffer.from(lastKey as string, \"base64\").toString(\"ascii\")\n      );\n    }\n\n    let filterExpression = [];\n    let expressionAttributeValues: Record<string, any> = {};\n    if (status) {\n      filterExpression.push(\"#status = :status\");\n      expressionAttributeValues[\":status\"] = status;\n    }\n    if (keyword) {\n      filterExpression.push(\"contains(title, :keyword)\");\n      expressionAttributeValues[\":keyword\"] = keyword;\n    }\n    if (filterExpression.length > 0) {\n      scanParams.FilterExpression = filterExpression.join(\" and \");\n      scanParams.ExpressionAttributeNames = { \"#status\": \"status\" };\n      scanParams.ExpressionAttributeValues = expressionAttributeValues;\n    }\n\n    const result = await todoService.listTodos(scanParams);\n\n    let nextKey = null;\n    if (result.LastEvaluatedKey) {\n      nextKey = Buffer.from(JSON.stringify(result.LastEvaluatedKey)).toString(\n        \"base64\"\n      );\n    }\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        items: result.Items,\n        count: result.Count,\n        lastKey: nextKey,\n      }),\n    };\n  } catch (error: any) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: \"Could not list todos.\",\n        error: error.message,\n      }),\n    };\n  }\n};\n\nexport const getTodo = async (\n  event: APIGatewayEvent\n): Promise<APIGatewayProxyResult> => {\n  try {\n    const { id } = event.pathParameters || {};\n    const todo = await todoService.getTodo(id as string);\n    if (!todo) {\n      return {\n        statusCode: 404,\n        body: JSON.stringify({ message: \"Todo not found.\" }),\n      };\n    }\n    return {\n      statusCode: 200,\n      body: JSON.stringify(todo),\n    };\n  } catch (error: any) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: \"Could not get todo.\",\n        error: error.message,\n      }),\n    };\n  }\n};\n\nexport const updateTodo = async (\n  event: APIGatewayEvent\n): Promise<APIGatewayProxyResult> => {\n  try {\n    const { id } = event.pathParameters || {};\n    const updatedTodo = await todoService.updateTodo(\n      id as string,\n      JSON.parse(event.body || \"{}\")\n    );\n    return {\n      statusCode: 200,\n      body: JSON.stringify(updatedTodo),\n    };\n  } catch (error: any) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: \"Could not update todo.\",\n        error: error.message,\n      }),\n    };\n  }\n};\n\nexport const deleteTodo = async (\n  event: APIGatewayEvent\n): Promise<APIGatewayProxyResult> => {\n  try {\n    const { id } = event.pathParameters || {};\n    await todoService.deleteTodo(id as string);\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ message: \"Todo deleted successfully.\" }),\n    };\n  } catch (error: any) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: \"Could not delete todo.\",\n        error: error.message,\n      }),\n    };\n  }\n};\n\nexport const listTodosByStatus = async (\n  event: APIGatewayEvent\n): Promise<APIGatewayProxyResult> => {\n  try {\n    const { status } = event.queryStringParameters || {};\n    const todos = await todoService.listTodosByStatus(status as Todo[\"status\"]);\n    return {\n      statusCode: 200,\n      body: JSON.stringify(todos),\n    };\n  } catch (error: any) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        message: \"Could not list todos by status.\",\n        error: error.message,\n      }),\n    };\n  }\n};\n\nexport default {\n  createTodo,\n  listTodos,\n  getTodo,\n  updateTodo,\n  deleteTodo,\n  listTodosByStatus,\n};\n", "import {\r\n  DeleteCommand,\r\n  DeleteCommandInput,\r\n  GetCommand,\r\n  GetCommandInput,\r\n  PutCommand,\r\n  PutCommandInput,\r\n  QueryCommand,\r\n  QueryCommandInput,\r\n  ScanCommand,\r\n  ScanCommandInput,\r\n  UpdateCommand,\r\n  UpdateCommandInput,\r\n} from \"@aws-sdk/lib-dynamodb\";\r\nimport docClient from \"../config/aws\";\r\nimport { Todo } from \"../types/todo\";\r\nimport { generateUUID } from \"../utils/helper\";\r\n\r\nconst TableName = \"todos-table\";\r\n\r\nexport const createTodo = async (\r\n  taskData: Omit<Todo, \"id\" | \"createdAt\" | \"updatedAt\">\r\n): Promise<Todo> => {\r\n  const id = generateUUID();\r\n  const todo: Todo = {\r\n    id,\r\n    ...taskData,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n  };\r\n\r\n  const params: PutCommandInput = { TableName, Item: todo };\r\n  await docClient.send(new PutCommand(params));\r\n  return todo;\r\n};\r\n\r\nexport const listTodos = async (params: ScanCommandInput) => {\r\n  const command = new ScanCommand(params);\r\n  const result = await docClient.send(command);\r\n  return result;\r\n};\r\n\r\nexport const getTodo = async (id: string): Promise<Todo | undefined> => {\r\n  const params: GetCommandInput = { TableName, Key: { id } };\r\n  const command = new GetCommand(params);\r\n  const result = await docClient.send(command);\r\n  return result.Item as Todo | undefined;\r\n};\r\n\r\nexport const updateTodo = async (\r\n  id: string,\r\n  taskData: Partial<Todo>\r\n): Promise<Todo | undefined> => {\r\n  const updateExpressions = [];\r\n  const expressionAttributeValues: Record<string, any> = {\r\n    \":u\": new Date().toISOString(),\r\n  };\r\n  const expressionAttributeNames: Record<string, string> = {\r\n    \"#status\": \"status\",\r\n  };\r\n\r\n  for (const key in taskData) {\r\n    if (Object.prototype.hasOwnProperty.call(taskData, key)) {\r\n      if (key === \"status\") {\r\n        updateExpressions.push(\"#status = :s\");\r\n        expressionAttributeValues[\":s\"] = taskData.status;\r\n      } else if(key !== \"id\" && key !== \"createdAt\" && key !== \"updatedAt\") {\r\n        updateExpressions.push(`${key} = :${key}`);\r\n        expressionAttributeValues[`:${key}`] = taskData[key as keyof Todo];\r\n      }\r\n    }\r\n  }\r\n\r\n  const params: UpdateCommandInput = {\r\n    TableName,\r\n    Key: { id },\r\n    UpdateExpression:\r\n      \"set \" + updateExpressions.join(\", \") + \", updatedAt = :u\",\r\n    ExpressionAttributeNames: expressionAttributeNames,\r\n    ExpressionAttributeValues: expressionAttributeValues,\r\n    ReturnValues: \"ALL_NEW\",\r\n  };\r\n  console.log(\"\uD83D\uDE80 ~ updateTodo ~ params:\", params)\r\n\r\n  const command = new UpdateCommand(params);\r\n  const result = await docClient.send(command);\r\n  return result.Attributes as Todo | undefined;\r\n};\r\n\r\nexport const deleteTodo = async (id: string): Promise<void> => {\r\n  const params: DeleteCommandInput = { TableName, Key: { id } };\r\n  const command = new DeleteCommand(params);\r\n  await docClient.send(command);\r\n};\r\n\r\nexport const listTodosByStatus = async (\r\n  status: Todo[\"status\"]\r\n): Promise<Todo[]> => {\r\n  const params: QueryCommandInput = {\r\n    TableName,\r\n    IndexName: \"status-index\",\r\n    KeyConditionExpression: \"#status = :status\",\r\n    ExpressionAttributeNames: { \"#status\": \"status\" },\r\n    ExpressionAttributeValues: { \":status\": status },\r\n  };\r\n  const command = new QueryCommand(params);\r\n  const result = await docClient.send(command);\r\n  return (result.Items as Todo[]) || [];\r\n};\r\n", "import { DynamoDBClient } from '@aws-sdk/client-dynamodb';\r\nimport { DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb';\r\n\r\nconst client = new DynamoDBClient({\r\n  region: process.env.AWS_REGION,\r\n});\r\n\r\nconst docClient = DynamoDBDocumentClient.from(client);\r\n\r\nexport default docClient;", "import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n", "import { randomFillSync } from 'crypto';\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        randomFillSync(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\n", "import { randomUUID } from 'crypto';\nexport default { randomUUID };\n", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n", "import { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport const generateUUID = (): string => uuidv4();\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,oBAAAA;AAAA,EAAA;AAAA,oBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,iBAAAC;AAAA,EAAA,yBAAAC;AAAA,EAAA,kBAAAC;AAAA;AAAA;;;ACAA,IAAAC,uBAaO;;;ACbP,6BAA+B;AAC/B,0BAAuC;AAEvC,IAAM,SAAS,IAAI,sCAAe;AAAA,EAChC,QAAQ,QAAQ,IAAI;AACtB,CAAC;AAED,IAAM,YAAY,2CAAuB,KAAK,MAAM;AAEpD,IAAO,cAAQ;;;ACRf,IAAM,YAAY,CAAC;AACnB,SAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC1B,YAAU,MAAM,IAAI,KAAO,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;AACpD;AACO,SAAS,gBAAgB,KAAK,SAAS,GAAG;AAC7C,UAAQ,UAAU,IAAI,SAAS,CAAC,CAAC,IAC7B,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,GAAG,YAAY;AACjD;;;AC1BA,oBAA+B;AAC/B,IAAM,YAAY,IAAI,WAAW,GAAG;AACpC,IAAI,UAAU,UAAU;AACT,SAAR,MAAuB;AAC1B,MAAI,UAAU,UAAU,SAAS,IAAI;AACjC,sCAAe,SAAS;AACxB,cAAU;AAAA,EACd;AACA,SAAO,UAAU,MAAM,SAAU,WAAW,EAAG;AACnD;;;ACTA,IAAAC,iBAA2B;AAC3B,IAAO,iBAAQ,EAAE,sCAAW;;;ACE5B,SAAS,GAAG,SAAS,KAAK,QAAQ;AAC9B,MAAI,eAAO,cAAc,CAAC,OAAO,CAAC,SAAS;AACvC,WAAO,eAAO,WAAW;AAAA,EAC7B;AACA,YAAU,WAAW,CAAC;AACtB,QAAM,OAAO,QAAQ,UAAU,QAAQ,MAAM,KAAK,IAAI;AACtD,MAAI,KAAK,SAAS,IAAI;AAClB,UAAM,IAAI,MAAM,mCAAmC;AAAA,EACvD;AACA,OAAK,CAAC,IAAK,KAAK,CAAC,IAAI,KAAQ;AAC7B,OAAK,CAAC,IAAK,KAAK,CAAC,IAAI,KAAQ;AAC7B,MAAI,KAAK;AACL,aAAS,UAAU;AACnB,QAAI,SAAS,KAAK,SAAS,KAAK,IAAI,QAAQ;AACxC,YAAM,IAAI,WAAW,mBAAmB,MAAM,IAAI,SAAS,EAAE,0BAA0B;AAAA,IAC3F;AACA,aAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AACzB,UAAI,SAAS,CAAC,IAAI,KAAK,CAAC;AAAA,IAC5B;AACA,WAAO;AAAA,EACX;AACA,SAAO,gBAAgB,IAAI;AAC/B;AACA,IAAO,aAAQ;;;ACxBR,IAAM,eAAe,MAAc,WAAO;;;ANgBjD,IAAM,YAAY;AAEX,IAAM,aAAa,OACxB,aACkB;AAClB,QAAM,KAAK,aAAa;AACxB,QAAM,OAAa;AAAA,IACjB;AAAA,IACA,GAAG;AAAA,IACH,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,IAClC,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,EACpC;AAEA,QAAM,SAA0B,EAAE,WAAW,MAAM,KAAK;AACxD,QAAM,YAAU,KAAK,IAAI,gCAAW,MAAM,CAAC;AAC3C,SAAO;AACT;AAEO,IAAM,YAAY,OAAO,WAA6B;AAC3D,QAAM,UAAU,IAAI,iCAAY,MAAM;AACtC,QAAM,SAAS,MAAM,YAAU,KAAK,OAAO;AAC3C,SAAO;AACT;AAEO,IAAM,UAAU,OAAO,OAA0C;AACtE,QAAM,SAA0B,EAAE,WAAW,KAAK,EAAE,GAAG,EAAE;AACzD,QAAM,UAAU,IAAI,gCAAW,MAAM;AACrC,QAAM,SAAS,MAAM,YAAU,KAAK,OAAO;AAC3C,SAAO,OAAO;AAChB;AAEO,IAAM,aAAa,OACxB,IACA,aAC8B;AAC9B,QAAM,oBAAoB,CAAC;AAC3B,QAAM,4BAAiD;AAAA,IACrD,OAAM,oBAAI,KAAK,GAAE,YAAY;AAAA,EAC/B;AACA,QAAM,2BAAmD;AAAA,IACvD,WAAW;AAAA,EACb;AAEA,aAAW,OAAO,UAAU;AAC1B,QAAI,OAAO,UAAU,eAAe,KAAK,UAAU,GAAG,GAAG;AACvD,UAAI,QAAQ,UAAU;AACpB,0BAAkB,KAAK,cAAc;AACrC,kCAA0B,IAAI,IAAI,SAAS;AAAA,MAC7C,WAAU,QAAQ,QAAQ,QAAQ,eAAe,QAAQ,aAAa;AACpE,0BAAkB,KAAK,GAAG,GAAG,OAAO,GAAG,EAAE;AACzC,kCAA0B,IAAI,GAAG,EAAE,IAAI,SAAS,GAAiB;AAAA,MACnE;AAAA,IACF;AAAA,EACF;AAEA,QAAM,SAA6B;AAAA,IACjC;AAAA,IACA,KAAK,EAAE,GAAG;AAAA,IACV,kBACE,SAAS,kBAAkB,KAAK,IAAI,IAAI;AAAA,IAC1C,0BAA0B;AAAA,IAC1B,2BAA2B;AAAA,IAC3B,cAAc;AAAA,EAChB;AACA,UAAQ,IAAI,oCAA6B,MAAM;AAE/C,QAAM,UAAU,IAAI,mCAAc,MAAM;AACxC,QAAM,SAAS,MAAM,YAAU,KAAK,OAAO;AAC3C,SAAO,OAAO;AAChB;AAEO,IAAM,aAAa,OAAO,OAA8B;AAC7D,QAAM,SAA6B,EAAE,WAAW,KAAK,EAAE,GAAG,EAAE;AAC5D,QAAM,UAAU,IAAI,mCAAc,MAAM;AACxC,QAAM,YAAU,KAAK,OAAO;AAC9B;AAEO,IAAM,oBAAoB,OAC/B,WACoB;AACpB,QAAM,SAA4B;AAAA,IAChC;AAAA,IACA,WAAW;AAAA,IACX,wBAAwB;AAAA,IACxB,0BAA0B,EAAE,WAAW,SAAS;AAAA,IAChD,2BAA2B,EAAE,WAAW,OAAO;AAAA,EACjD;AACA,QAAM,UAAU,IAAI,kCAAa,MAAM;AACvC,QAAM,SAAS,MAAM,YAAU,KAAK,OAAO;AAC3C,SAAQ,OAAO,SAAoB,CAAC;AACtC;;;ADvGO,IAAMC,cAAa,OACxB,UACmC;AACnC,MAAI;AACF,UAAM,EAAE,UAAU,OAAO,aAAa,OAAO,IAAI,KAAK;AAAA,MACpD,MAAM,QAAQ;AAAA,IAChB;AACA,UAAM,OAAO,MAAkB,WAAW;AAAA,MACxC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AACD,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,IAAI;AAAA,IAC3B;AAAA,EACF,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,OAAO,MAAM;AAAA,MACf,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAEO,IAAMC,aAAY,OACvB,UACmC;AACnC,MAAI;AACF,UAAM,EAAE,SAAS,QAAQ,OAAO,QAAQ,IACtC,MAAM,yBAAyB,CAAC;AAElC,QAAI,aAA+B;AAAA,MACjC,WAAW;AAAA,MACX,OAAO,QAAQ,SAAS,KAAe,IAAI;AAAA,IAC7C;AAEA,QAAI,SAAS;AACX,iBAAW,oBAAoB,KAAK;AAAA,QAClC,OAAO,KAAK,SAAmB,QAAQ,EAAE,SAAS,OAAO;AAAA,MAC3D;AAAA,IACF;AAEA,QAAI,mBAAmB,CAAC;AACxB,QAAI,4BAAiD,CAAC;AACtD,QAAI,QAAQ;AACV,uBAAiB,KAAK,mBAAmB;AACzC,gCAA0B,SAAS,IAAI;AAAA,IACzC;AACA,QAAI,SAAS;AACX,uBAAiB,KAAK,2BAA2B;AACjD,gCAA0B,UAAU,IAAI;AAAA,IAC1C;AACA,QAAI,iBAAiB,SAAS,GAAG;AAC/B,iBAAW,mBAAmB,iBAAiB,KAAK,OAAO;AAC3D,iBAAW,2BAA2B,EAAE,WAAW,SAAS;AAC5D,iBAAW,4BAA4B;AAAA,IACzC;AAEA,UAAM,SAAS,MAAkB,UAAU,UAAU;AAErD,QAAI,UAAU;AACd,QAAI,OAAO,kBAAkB;AAC3B,gBAAU,OAAO,KAAK,KAAK,UAAU,OAAO,gBAAgB,CAAC,EAAE;AAAA,QAC7D;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO,OAAO;AAAA,QACd,OAAO,OAAO;AAAA,QACd,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,OAAO,MAAM;AAAA,MACf,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAEO,IAAMC,WAAU,OACrB,UACmC;AACnC,MAAI;AACF,UAAM,EAAE,GAAG,IAAI,MAAM,kBAAkB,CAAC;AACxC,UAAM,OAAO,MAAkB,QAAQ,EAAY;AACnD,QAAI,CAAC,MAAM;AACT,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,SAAS,kBAAkB,CAAC;AAAA,MACrD;AAAA,IACF;AACA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,IAAI;AAAA,IAC3B;AAAA,EACF,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,OAAO,MAAM;AAAA,MACf,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAEO,IAAMC,cAAa,OACxB,UACmC;AACnC,MAAI;AACF,UAAM,EAAE,GAAG,IAAI,MAAM,kBAAkB,CAAC;AACxC,UAAM,cAAc,MAAkB;AAAA,MACpC;AAAA,MACA,KAAK,MAAM,MAAM,QAAQ,IAAI;AAAA,IAC/B;AACA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,WAAW;AAAA,IAClC;AAAA,EACF,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,OAAO,MAAM;AAAA,MACf,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAEO,IAAMC,cAAa,OACxB,UACmC;AACnC,MAAI;AACF,UAAM,EAAE,GAAG,IAAI,MAAM,kBAAkB,CAAC;AACxC,UAAkB,WAAW,EAAY;AACzC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,SAAS,6BAA6B,CAAC;AAAA,IAChE;AAAA,EACF,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,OAAO,MAAM;AAAA,MACf,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAEO,IAAMC,qBAAoB,OAC/B,UACmC;AACnC,MAAI;AACF,UAAM,EAAE,OAAO,IAAI,MAAM,yBAAyB,CAAC;AACnD,UAAM,QAAQ,MAAkB,kBAAkB,MAAwB;AAC1E,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,KAAK;AAAA,IAC5B;AAAA,EACF,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,OAAO,MAAM;AAAA,MACf,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAEA,IAAO,yBAAQ;AAAA,EACb,YAAAL;AAAA,EACA,WAAAC;AAAA,EACA,SAAAC;AAAA,EACA,YAAAC;AAAA,EACA,YAAAC;AAAA,EACA,mBAAAC;AACF;",
  "names": ["createTodo", "deleteTodo", "getTodo", "listTodos", "listTodosByStatus", "updateTodo", "import_lib_dynamodb", "import_crypto", "createTodo", "listTodos", "getTodo", "updateTodo", "deleteTodo", "listTodosByStatus"]
}
