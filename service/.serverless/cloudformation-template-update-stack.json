{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "CustomAuthorizerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-manager-service-dev-customAuthorizer"
      }
    },
    "DefineAuthChallengeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-manager-service-dev-defineAuthChallenge"
      }
    },
    "CreateAuthChallengeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-manager-service-dev-createAuthChallenge"
      }
    },
    "VerifyAuthChallengeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-manager-service-dev-verifyAuthChallenge"
      }
    },
    "StartLoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-manager-service-dev-startLogin"
      }
    },
    "VerifyOtpLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-manager-service-dev-verifyOtp"
      }
    },
    "RegisterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-manager-service-dev-register"
      }
    },
    "SigninLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-manager-service-dev-signin"
      }
    },
    "CreateTodoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-manager-service-dev-createTodo"
      }
    },
    "ListTodosLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-manager-service-dev-listTodos"
      }
    },
    "GetTodoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-manager-service-dev-getTodo"
      }
    },
    "UpdateTodoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-manager-service-dev-updateTodo"
      }
    },
    "DeleteTodoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-manager-service-dev-deleteTodo"
      }
    },
    "ListTodosByStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-manager-service-dev-listTodosByStatus"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "task-manager-service",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-manager-service-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-manager-service-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:Scan",
                    "dynamodb:Query"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:ap-southeast-1:476114140816:table/todos-table",
                    "arn:aws:dynamodb:ap-southeast-1:476114140816:table/todos-table/index/status-index",
                    "arn:aws:dynamodb:ap-southeast-1:476114140816:table/Users"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:AdminCreateUser",
                    "cognito-idp:AdminInitiateAuth",
                    "cognito-idp:AdminRespondToAuthChallenge",
                    "cognito-idp:AdminSetUserPassword"
                  ],
                  "Resource": "arn:aws:cognito-idp:ap-southeast-1:476114140816:userpool/ap-southeast-1_1NCIH8mzZ"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "task-manager-service",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "CustomAuthorizerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-southeast-1-be48ea48-0f56",
          "S3Key": "serverless/task-manager-service/dev/1756952420985-2025-09-04T02:20:20.985Z/task-manager-service.zip"
        },
        "Handler": "src/authorizer.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-manager-service-dev-customAuthorizer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "todos-table",
            "USER_POOL_ID": "ap-southeast-1_1NCIH8mzZ",
            "CLIENT_ID": "6q6rpl3gim61bcsbb04tnqnb91",
            "USERS_TABLE": "Users",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "AuthorizerRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CustomAuthorizerLogGroup",
        "AuthorizerRole"
      ]
    },
    "DefineAuthChallengeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-southeast-1-be48ea48-0f56",
          "S3Key": "serverless/task-manager-service/dev/1756952420985-2025-09-04T02:20:20.985Z/task-manager-service.zip"
        },
        "Handler": "src/triggers/defineAuthChallenge.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-manager-service-dev-defineAuthChallenge",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "todos-table",
            "USER_POOL_ID": "ap-southeast-1_1NCIH8mzZ",
            "CLIENT_ID": "6q6rpl3gim61bcsbb04tnqnb91",
            "USERS_TABLE": "Users",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DefineAuthChallengeLogGroup"
      ]
    },
    "CreateAuthChallengeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-southeast-1-be48ea48-0f56",
          "S3Key": "serverless/task-manager-service/dev/1756952420985-2025-09-04T02:20:20.985Z/task-manager-service.zip"
        },
        "Handler": "src/triggers/createAuthChallenge.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-manager-service-dev-createAuthChallenge",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "todos-table",
            "USER_POOL_ID": "ap-southeast-1_1NCIH8mzZ",
            "CLIENT_ID": "6q6rpl3gim61bcsbb04tnqnb91",
            "USERS_TABLE": "Users",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateAuthChallengeLogGroup"
      ]
    },
    "VerifyAuthChallengeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-southeast-1-be48ea48-0f56",
          "S3Key": "serverless/task-manager-service/dev/1756952420985-2025-09-04T02:20:20.985Z/task-manager-service.zip"
        },
        "Handler": "src/triggers/verifyAuthChallenge.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-manager-service-dev-verifyAuthChallenge",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "todos-table",
            "USER_POOL_ID": "ap-southeast-1_1NCIH8mzZ",
            "CLIENT_ID": "6q6rpl3gim61bcsbb04tnqnb91",
            "USERS_TABLE": "Users",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "VerifyAuthChallengeLogGroup"
      ]
    },
    "StartLoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-southeast-1-be48ea48-0f56",
          "S3Key": "serverless/task-manager-service/dev/1756952420985-2025-09-04T02:20:20.985Z/task-manager-service.zip"
        },
        "Handler": "src/controllers/authController.startLogin",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-manager-service-dev-startLogin",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "todos-table",
            "USER_POOL_ID": "ap-southeast-1_1NCIH8mzZ",
            "CLIENT_ID": "6q6rpl3gim61bcsbb04tnqnb91",
            "USERS_TABLE": "Users",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "StartLoginLogGroup"
      ]
    },
    "VerifyOtpLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-southeast-1-be48ea48-0f56",
          "S3Key": "serverless/task-manager-service/dev/1756952420985-2025-09-04T02:20:20.985Z/task-manager-service.zip"
        },
        "Handler": "src/controllers/authController.verifyOtp",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-manager-service-dev-verifyOtp",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "todos-table",
            "USER_POOL_ID": "ap-southeast-1_1NCIH8mzZ",
            "CLIENT_ID": "6q6rpl3gim61bcsbb04tnqnb91",
            "USERS_TABLE": "Users",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "VerifyOtpLogGroup"
      ]
    },
    "RegisterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-southeast-1-be48ea48-0f56",
          "S3Key": "serverless/task-manager-service/dev/1756952420985-2025-09-04T02:20:20.985Z/task-manager-service.zip"
        },
        "Handler": "src/controllers/authController.registerUser",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-manager-service-dev-register",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "todos-table",
            "USER_POOL_ID": "ap-southeast-1_1NCIH8mzZ",
            "CLIENT_ID": "6q6rpl3gim61bcsbb04tnqnb91",
            "USERS_TABLE": "Users",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RegisterLogGroup"
      ]
    },
    "SigninLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-southeast-1-be48ea48-0f56",
          "S3Key": "serverless/task-manager-service/dev/1756952420985-2025-09-04T02:20:20.985Z/task-manager-service.zip"
        },
        "Handler": "src/controllers/authController.signin",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-manager-service-dev-signin",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "todos-table",
            "USER_POOL_ID": "ap-southeast-1_1NCIH8mzZ",
            "CLIENT_ID": "6q6rpl3gim61bcsbb04tnqnb91",
            "USERS_TABLE": "Users",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SigninLogGroup"
      ]
    },
    "CreateTodoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-southeast-1-be48ea48-0f56",
          "S3Key": "serverless/task-manager-service/dev/1756952420985-2025-09-04T02:20:20.985Z/task-manager-service.zip"
        },
        "Handler": "src/controllers/todoController.createTodo",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-manager-service-dev-createTodo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "todos-table",
            "USER_POOL_ID": "ap-southeast-1_1NCIH8mzZ",
            "CLIENT_ID": "6q6rpl3gim61bcsbb04tnqnb91",
            "USERS_TABLE": "Users",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateTodoLogGroup"
      ]
    },
    "ListTodosLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-southeast-1-be48ea48-0f56",
          "S3Key": "serverless/task-manager-service/dev/1756952420985-2025-09-04T02:20:20.985Z/task-manager-service.zip"
        },
        "Handler": "src/controllers/todoController.listTodos",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-manager-service-dev-listTodos",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "todos-table",
            "USER_POOL_ID": "ap-southeast-1_1NCIH8mzZ",
            "CLIENT_ID": "6q6rpl3gim61bcsbb04tnqnb91",
            "USERS_TABLE": "Users",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListTodosLogGroup"
      ]
    },
    "GetTodoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-southeast-1-be48ea48-0f56",
          "S3Key": "serverless/task-manager-service/dev/1756952420985-2025-09-04T02:20:20.985Z/task-manager-service.zip"
        },
        "Handler": "src/controllers/todoController.getTodo",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-manager-service-dev-getTodo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "todos-table",
            "USER_POOL_ID": "ap-southeast-1_1NCIH8mzZ",
            "CLIENT_ID": "6q6rpl3gim61bcsbb04tnqnb91",
            "USERS_TABLE": "Users",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetTodoLogGroup"
      ]
    },
    "UpdateTodoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-southeast-1-be48ea48-0f56",
          "S3Key": "serverless/task-manager-service/dev/1756952420985-2025-09-04T02:20:20.985Z/task-manager-service.zip"
        },
        "Handler": "src/controllers/todoController.updateTodo",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-manager-service-dev-updateTodo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "todos-table",
            "USER_POOL_ID": "ap-southeast-1_1NCIH8mzZ",
            "CLIENT_ID": "6q6rpl3gim61bcsbb04tnqnb91",
            "USERS_TABLE": "Users",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateTodoLogGroup"
      ]
    },
    "DeleteTodoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-southeast-1-be48ea48-0f56",
          "S3Key": "serverless/task-manager-service/dev/1756952420985-2025-09-04T02:20:20.985Z/task-manager-service.zip"
        },
        "Handler": "src/controllers/todoController.deleteTodo",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-manager-service-dev-deleteTodo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "todos-table",
            "USER_POOL_ID": "ap-southeast-1_1NCIH8mzZ",
            "CLIENT_ID": "6q6rpl3gim61bcsbb04tnqnb91",
            "USERS_TABLE": "Users",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteTodoLogGroup"
      ]
    },
    "ListTodosByStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-southeast-1-be48ea48-0f56",
          "S3Key": "serverless/task-manager-service/dev/1756952420985-2025-09-04T02:20:20.985Z/task-manager-service.zip"
        },
        "Handler": "src/controllers/todoController.listTodosByStatus",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-manager-service-dev-listTodosByStatus",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TABLE_NAME": "todos-table",
            "USER_POOL_ID": "ap-southeast-1_1NCIH8mzZ",
            "CLIENT_ID": "6q6rpl3gim61bcsbb04tnqnb91",
            "USERS_TABLE": "Users",
            "NODE_OPTIONS": "--enable-source-maps"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListTodosByStatusLogGroup"
      ]
    },
    "CustomAuthorizerLambdaVersionzdeDTDSabtFrlnkDp6xJaALri2uHW1ZMYisS06QW98": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CustomAuthorizerLambdaFunction"
        },
        "CodeSha256": "6UL0ZYNl1v1h9S8jEnA2/B3N0K11XqWyBKGFAHE+H/w="
      }
    },
    "DefineAuthChallengeLambdaVersioncYIe3IHpu8KLE1J1648UOLF9S1De6iJy9KcSMm3xwI0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DefineAuthChallengeLambdaFunction"
        },
        "CodeSha256": "6UL0ZYNl1v1h9S8jEnA2/B3N0K11XqWyBKGFAHE+H/w="
      }
    },
    "CreateAuthChallengeLambdaVersionLRrPDIaK0eD8kIztk7lJA6pntKAke5Nejbo6vanG0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateAuthChallengeLambdaFunction"
        },
        "CodeSha256": "6UL0ZYNl1v1h9S8jEnA2/B3N0K11XqWyBKGFAHE+H/w="
      }
    },
    "VerifyAuthChallengeLambdaVersionaSDDzIhnjlElJeNXmnUfitLYuzMq6IhW442EE3vOTHE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VerifyAuthChallengeLambdaFunction"
        },
        "CodeSha256": "6UL0ZYNl1v1h9S8jEnA2/B3N0K11XqWyBKGFAHE+H/w="
      }
    },
    "StartLoginLambdaVersionFERdTcBpQtjWjADHOY0cOWRZXrceYsvkaCdk6FXpfw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "StartLoginLambdaFunction"
        },
        "CodeSha256": "6UL0ZYNl1v1h9S8jEnA2/B3N0K11XqWyBKGFAHE+H/w="
      }
    },
    "VerifyOtpLambdaVersionrsfXwukIDmErrgMUcCDssh4lKe0pxNtraRsVuIL0sxE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VerifyOtpLambdaFunction"
        },
        "CodeSha256": "6UL0ZYNl1v1h9S8jEnA2/B3N0K11XqWyBKGFAHE+H/w="
      }
    },
    "RegisterLambdaVersionrPl8g68THEhWID640aaOjbN97M5KvMPvYAyX24w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RegisterLambdaFunction"
        },
        "CodeSha256": "6UL0ZYNl1v1h9S8jEnA2/B3N0K11XqWyBKGFAHE+H/w="
      }
    },
    "SigninLambdaVersion2PiVHJH6xaz3mS2QcSUCABqOiA8t9TL8eJoZGSqLu2M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SigninLambdaFunction"
        },
        "CodeSha256": "6UL0ZYNl1v1h9S8jEnA2/B3N0K11XqWyBKGFAHE+H/w="
      }
    },
    "CreateTodoLambdaVersionMt2HW3KRB7axfHhl2QfBtLy5YvHDBbrXAXxzJ1Leupc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateTodoLambdaFunction"
        },
        "CodeSha256": "6UL0ZYNl1v1h9S8jEnA2/B3N0K11XqWyBKGFAHE+H/w="
      }
    },
    "ListTodosLambdaVersionOreAZdH3ewmmduuwcqXpI8RiYiJeKBt7yZsPfAzC6c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListTodosLambdaFunction"
        },
        "CodeSha256": "6UL0ZYNl1v1h9S8jEnA2/B3N0K11XqWyBKGFAHE+H/w="
      }
    },
    "GetTodoLambdaVersionbhLkT5qOIicpCkIgFBziiAw38IXzvqjD7pwDj97VrE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTodoLambdaFunction"
        },
        "CodeSha256": "6UL0ZYNl1v1h9S8jEnA2/B3N0K11XqWyBKGFAHE+H/w="
      }
    },
    "UpdateTodoLambdaVersion4XG4X2rzSsOqAozJKHgD06r0nCaYrQXjDbgjTcMmVeI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateTodoLambdaFunction"
        },
        "CodeSha256": "6UL0ZYNl1v1h9S8jEnA2/B3N0K11XqWyBKGFAHE+H/w="
      }
    },
    "DeleteTodoLambdaVersionLK7nyy9zjWAXtwZemaM0c9MhspLs9fMCzgfhfp59n0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteTodoLambdaFunction"
        },
        "CodeSha256": "6UL0ZYNl1v1h9S8jEnA2/B3N0K11XqWyBKGFAHE+H/w="
      }
    },
    "ListTodosByStatusLambdaVersionboZe3UcO7M2HYaF0DTnO8MhCP7xO9NMsMLEv4T4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListTodosByStatusLambdaFunction"
        },
        "CodeSha256": "6UL0ZYNl1v1h9S8jEnA2/B3N0K11XqWyBKGFAHE+H/w="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-task-manager-service",
        "ProtocolType": "HTTP",
        "CorsConfiguration": {
          "AllowHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amz-User-Agent",
            "X-Amzn-Trace-Id"
          ],
          "AllowMethods": [
            "OPTIONS",
            "POST",
            "GET",
            "PUT",
            "DELETE"
          ],
          "AllowOrigins": [
            "*"
          ]
        }
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "CustomAuthorizerLambdaAuthorizerPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CustomAuthorizerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiAuthorizerCustomAuthorizer": {
      "Type": "AWS::ApiGatewayV2::Authorizer",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "Name": "customAuthorizer",
        "IdentitySource": [
          "$request.header.Authorization",
          "$request.header.authorization"
        ],
        "AuthorizerType": "REQUEST",
        "EnableSimpleResponses": true,
        "AuthorizerResultTtlInSeconds": 0,
        "AuthorizerPayloadFormatVersion": "2.0",
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "CustomAuthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "StartLoginLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "StartLoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationStartLogin": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "StartLoginLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAuthStartDashlogin": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /auth/start-login",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationStartLogin"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationStartLogin"
    },
    "VerifyOtpLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VerifyOtpLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationVerifyOtp": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "VerifyOtpLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAuthVerifyDashotp": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /auth/verify-otp",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationVerifyOtp"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationVerifyOtp"
    },
    "RegisterLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationRegister": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "RegisterLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAuthRegister": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /auth/register",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationRegister"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationRegister"
    },
    "SigninLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SigninLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSignin": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SigninLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAuthSignin": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /auth/signin",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSignin"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSignin"
    },
    "CreateTodoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateTodoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateTodo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateTodoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostTodos": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /todos",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateTodo"
              }
            ]
          ]
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerCustomAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationCreateTodo"
    },
    "ListTodosLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListTodosLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationListTodos": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ListTodosLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetTodos": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /todos",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationListTodos"
              }
            ]
          ]
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerCustomAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationListTodos"
    },
    "GetTodoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTodoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetTodo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetTodoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetTodosIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /todos/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetTodo"
              }
            ]
          ]
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerCustomAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationGetTodo"
    },
    "UpdateTodoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateTodoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateTodo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateTodoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutTodosIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /todos/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateTodo"
              }
            ]
          ]
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerCustomAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateTodo"
    },
    "DeleteTodoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteTodoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteTodo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteTodoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteTodosIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /todos/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteTodo"
              }
            ]
          ]
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerCustomAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteTodo"
    },
    "ListTodosByStatusLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListTodosByStatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationListTodosByStatus": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ListTodosByStatusLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetTodosByDashstatusStatusVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /todos/by-status/{status}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationListTodosByStatus"
              }
            ]
          ]
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerCustomAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationListTodosByStatus"
    },
    "AuthorizerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "task-manager-service-dev-authorizer-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "AuthorizerPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "arn:aws:logs:ap-southeast-1:476114140816:log-group:/aws/lambda/*:*:*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "TodosTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "todos-table",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "status",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "status-index",
            "KeySchema": [
              {
                "AttributeName": "status",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        ]
      }
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Users",
        "AttributeDefinitions": [
          {
            "AttributeName": "phone",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "phone",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-ap-southeast-1-be48ea48-0f56",
      "Export": {
        "Name": "sls-task-manager-service-dev-ServerlessDeploymentBucketName"
      }
    },
    "CustomAuthorizerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CustomAuthorizerLambdaVersionzdeDTDSabtFrlnkDp6xJaALri2uHW1ZMYisS06QW98"
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-CustomAuthorizerLambdaFunctionQualifiedArn"
      }
    },
    "DefineAuthChallengeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DefineAuthChallengeLambdaVersioncYIe3IHpu8KLE1J1648UOLF9S1De6iJy9KcSMm3xwI0"
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-DefineAuthChallengeLambdaFunctionQualifiedArn"
      }
    },
    "CreateAuthChallengeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateAuthChallengeLambdaVersionLRrPDIaK0eD8kIztk7lJA6pntKAke5Nejbo6vanG0"
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-CreateAuthChallengeLambdaFunctionQualifiedArn"
      }
    },
    "VerifyAuthChallengeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VerifyAuthChallengeLambdaVersionaSDDzIhnjlElJeNXmnUfitLYuzMq6IhW442EE3vOTHE"
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-VerifyAuthChallengeLambdaFunctionQualifiedArn"
      }
    },
    "StartLoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "StartLoginLambdaVersionFERdTcBpQtjWjADHOY0cOWRZXrceYsvkaCdk6FXpfw"
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-StartLoginLambdaFunctionQualifiedArn"
      }
    },
    "VerifyOtpLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VerifyOtpLambdaVersionrsfXwukIDmErrgMUcCDssh4lKe0pxNtraRsVuIL0sxE"
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-VerifyOtpLambdaFunctionQualifiedArn"
      }
    },
    "RegisterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RegisterLambdaVersionrPl8g68THEhWID640aaOjbN97M5KvMPvYAyX24w"
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-RegisterLambdaFunctionQualifiedArn"
      }
    },
    "SigninLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SigninLambdaVersion2PiVHJH6xaz3mS2QcSUCABqOiA8t9TL8eJoZGSqLu2M"
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-SigninLambdaFunctionQualifiedArn"
      }
    },
    "CreateTodoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateTodoLambdaVersionMt2HW3KRB7axfHhl2QfBtLy5YvHDBbrXAXxzJ1Leupc"
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-CreateTodoLambdaFunctionQualifiedArn"
      }
    },
    "ListTodosLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListTodosLambdaVersionOreAZdH3ewmmduuwcqXpI8RiYiJeKBt7yZsPfAzC6c"
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-ListTodosLambdaFunctionQualifiedArn"
      }
    },
    "GetTodoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTodoLambdaVersionbhLkT5qOIicpCkIgFBziiAw38IXzvqjD7pwDj97VrE"
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-GetTodoLambdaFunctionQualifiedArn"
      }
    },
    "UpdateTodoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateTodoLambdaVersion4XG4X2rzSsOqAozJKHgD06r0nCaYrQXjDbgjTcMmVeI"
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-UpdateTodoLambdaFunctionQualifiedArn"
      }
    },
    "DeleteTodoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteTodoLambdaVersionLK7nyy9zjWAXtwZemaM0c9MhspLs9fMCzgfhfp59n0"
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-DeleteTodoLambdaFunctionQualifiedArn"
      }
    },
    "ListTodosByStatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListTodosByStatusLambdaVersionboZe3UcO7M2HYaF0DTnO8MhCP7xO9NMsMLEv4T4"
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-ListTodosByStatusLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-task-manager-service-dev-HttpApiUrl"
      }
    }
  }
}