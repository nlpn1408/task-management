org: nlpnserverless
service: task-manager-service

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-1
  stage: dev
  httpApi:
    cors: true
    authorizers:
      customAuthorizer:
        type: request
        functionName: customAuthorizer
        name: customAuthorizer
        resultTtlInSeconds: 0
        enableSimpleResponses: true
        payloadVersion: '2.0'
        identitySource:
          - $request.header.Authorization
          - $request.header.authorization
  environment:
    TABLE_NAME: ${self:custom.tableName}
    USER_POOL_ID: ap-southeast-1_1NCIH8mzZ
    CLIENT_ID: 6q6rpl3gim61bcsbb04tnqnb91
    USERS_TABLE: ${self:custom.usersTableName} # Sử dụng biến để nhất quán
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:Query
          Resource:
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tableName}"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tableName}/index/status-index"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.usersTableName}" # Điểm đến bảng Users
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminRespondToAuthChallenge
            - cognito-idp:AdminSetUserPassword
          Resource: "arn:aws:cognito-idp:${aws:region}:${aws:accountId}:userpool/ap-southeast-1_1NCIH8mzZ"

custom:
  tableName: 'todos-table'
  usersTableName: 'Users' # Cập nhật thành Users để khớp với bảng thực tế

plugins:
  - serverless-offline

functions:
  customAuthorizer:
    handler: src/authorizer.handler
    role: AuthorizerRole

  defineAuthChallenge:
    handler: src/triggers/defineAuthChallenge.handler
  createAuthChallenge:
    handler: src/triggers/createAuthChallenge.handler
  verifyAuthChallenge:
    handler: src/triggers/verifyAuthChallenge.handler

  startLogin:
    handler: src/controllers/authController.startLogin
    events:
      - httpApi:
          path: /auth/start-login
          method: post

  verifyOtp:
    handler: src/controllers/authController.verifyOtp
    events:
      - httpApi:
          path: /auth/verify-otp
          method: post

  register:
    handler: src/controllers/authController.registerUser
    events:
      - httpApi:
          path: /auth/register
          method: post

  signin:
      handler: src/controllers/authController.signin
      events:
        - httpApi:
            path: /auth/signin
            method: post
            
  createTodo:
    handler: src/controllers/todoController.createTodo
    events:
      - httpApi:
          path: /todos
          method: post
          authorizer:
            name: customAuthorizer

  listTodos:
    handler: src/controllers/todoController.listTodos
    events:
      - httpApi:
          path: /todos
          method: get
          authorizer:
            name: customAuthorizer

  getTodo:
    handler: src/controllers/todoController.getTodo
    events:
      - httpApi:
          path: /todos/{id}
          method: get
          authorizer:
            name: customAuthorizer

  updateTodo:
    handler: src/controllers/todoController.updateTodo
    events:
      - httpApi:
          path: /todos/{id}
          method: put
          authorizer:
            name: customAuthorizer

  deleteTodo:
    handler: src/controllers/todoController.deleteTodo
    events:
      - httpApi:
          path: /todos/{id}
          method: delete
          authorizer:
            name: customAuthorizer

  listTodosByStatus:
    handler: src/controllers/todoController.listTodosByStatus
    events:
      - httpApi:
          path: /todos/by-status/{status}
          method: get
          authorizer:
            name: customAuthorizer

resources:
  Resources:
    AuthorizerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-authorizer-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: AuthorizerPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/*:*:*'

    TodosTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: 'status'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: 'status-index'
            KeySchema:
              - AttributeName: 'status'
                KeyType: 'HASH'
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    UsersTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.usersTableName} # Sử dụng Users
        AttributeDefinitions:
          - AttributeName: 'phone'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'phone'
            KeyType: 'HASH'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1